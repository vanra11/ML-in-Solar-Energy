import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor, StackingRegressor
from sklearn.neighbors import KNeighborsRegressor
from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

df = pd.read_csv("/content/Solar Power Plant Data.csv")

df = df[['Date-Hour(NMT)', 'WindSpeed', 'Sunshine', 'AirPressure', 
         'Radiation', 'AirTemperature', 'RelativeAirHumidity', 'SystemProduction']].copy()

df['Date-Hour(NMT)'] = pd.to_datetime(df['Date-Hour(NMT)'], format='%d.%m.%Y-%H:%M', errors='coerce')
df['Timestamp'] = df['Date-Hour(NMT)'].astype('int64') // 10**9
df.drop(columns=['Date-Hour(NMT)'], inplace=True)

df.dropna(inplace=True)

df['Target_Month_Ahead'] = df['SystemProduction'].shift(-720)
df.dropna(inplace=True)

X = df.drop(columns=['SystemProduction', 'Target_Month_Ahead'])
y = df['Target_Month_Ahead']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

X_train_sampled, _, y_train_sampled, _ = train_test_split(X_train_scaled, y_train, test_size=0.9, random_state=42, shuffle=False)

stacked_model = StackingRegressor(
    estimators=[
        ("rf", RandomForestRegressor(n_estimators=100, max_depth=7, random_state=42)),
        ("xgb", XGBRegressor(n_estimators=50, max_depth=5, random_state=42)),
        ("knn", KNeighborsRegressor(n_neighbors=5))
    ],
    final_estimator=RandomForestRegressor(n_estimators=50, max_depth=5, random_state=42)
)

stacked_model.fit(X_train_sampled, y_train_sampled)

y_pred = stacked_model.predict(X_test_scaled)

mse = mean_squared_error(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("MSE:", mse)
print("MAE:", mae)
print("R^2 Score:", r2)
