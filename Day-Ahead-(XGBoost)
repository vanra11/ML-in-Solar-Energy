import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import matplotlib.pyplot as plt

df = pd.read_csv("/content/Solar Power Plant Data.csv")
df = df[['Date-Hour(NMT)', 'WindSpeed', 'Sunshine', 'AirPressure',
         'Radiation', 'AirTemperature', 'RelativeAirHumidity', 'SystemProduction']].copy()

df['Date-Hour(NMT)'] = pd.to_datetime(df['Date-Hour(NMT)'], format='%d.%m.%Y-%H:%M', errors='coerce')
df['Timestamp'] = df['Date-Hour(NMT)'].astype('int64') // 10**9
df.drop(columns=['Date-Hour(NMT)'], inplace=True)
df.dropna(inplace=True)

df['Target_Day_Ahead'] = df['SystemProduction'].shift(-24)
df.dropna(inplace=True)

X = df.drop(columns=['SystemProduction', 'Target_Day_Ahead'])
y = df['Target_Day_Ahead']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

xgb_model = XGBRegressor(
    n_estimators=200,
    max_depth=6,
    learning_rate=0.1,
    subsample=0.8,
    colsample_bytree=0.9,
    random_state=42
)

xgb_model.fit(X_train_scaled, y_train)

y_pred = xgb_model.predict(X_test_scaled)
print("MSE:", mean_squared_error(y_test, y_pred))
print("MAE:", mean_absolute_error(y_test, y_pred))
print("RÂ² Score:", r2_score(y_test, y_pred))
